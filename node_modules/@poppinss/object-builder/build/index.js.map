{"version":3,"sources":["../index.ts"],"sourcesContent":["/*\n * @poppinss/object-builder\n *\n * (c) Poppinss\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\ntype PickKeysByValue<T, V> = { [K in keyof T]: T[K] extends V ? K : never }[keyof T]\ntype OmitProperties<T, P> = Omit<T, PickKeysByValue<T, P>>\n\n/**\n * A simple class to build an object incrementally. It is helpful when you\n * want to add properties to the object conditionally.\n *\n * Instead of writing\n * ```\n * const obj = {\n *   ...(user.id ? { id: user.id } : {}),\n *   ...(user.firstName && user.lastName ? { name: `${user.firstName} ${user.lastName}` } : {}),\n * }\n * ```\n *\n * You can write\n *\n * const obj = new ObjectBuilder()\n *   .add('id', user.id)\n *   .add(\n *     'fullName',\n *     user.firstName && user.lastName ? `${user.firstName} ${user.lastName}` : undefined\n *   )\n *   .toObject()\n */\nexport class ObjectBuilder<\n  ReturnType extends Record<string, any>,\n  IgnoreNull extends boolean = false,\n> {\n  #ignoreNull: boolean\n  values: ReturnType\n\n  constructor(initialValue: ReturnType, ignoreNull?: IgnoreNull) {\n    this.values = initialValue\n    this.#ignoreNull = ignoreNull === true ? true : false\n  }\n\n  /**\n   * Add a key-value pair to the object\n   *\n   * - Undefined values are ignored\n   * - Null values are ignored, when `ignoreNull` is set to true\n   */\n  add<Prop extends string>(key: Prop, value: undefined): this\n  add<Prop extends string, Value>(\n    key: Prop,\n    value: Value\n  ): ObjectBuilder<ReturnType & { [P in Prop]: Value }, IgnoreNull>\n  add<Prop extends string, Value>(key: Prop, value: Value): this {\n    if (value === undefined) {\n      return this\n    }\n\n    if (this.#ignoreNull === true && value === null) {\n      return this\n    }\n\n    ;(this.values as any)[key] = value\n    return this\n  }\n\n  /**\n   * Remove key from the object\n   */\n  remove<K extends keyof ReturnType>(key: K): this {\n    delete this.values[key]\n    return this\n  }\n\n  /**\n   * Find if a value exists\n   */\n  has<K extends keyof ReturnType>(key: K): boolean {\n    return this.get(key) !== undefined\n  }\n\n  /**\n   * Get the existing value for a given key\n   */\n  get<K extends keyof ReturnType>(key: K): ReturnType[K] {\n    return this.values[key]\n  }\n\n  /**\n   * Get the underlying constructed object\n   */\n  toObject(): IgnoreNull extends true\n    ? { [K in keyof OmitProperties<ReturnType, null>]: ReturnType[K] }\n    : { [K in keyof ReturnType]: ReturnType[K] } {\n    return this.values\n  }\n}\n"],"mappings":";AAkCO,IAAM,gBAAN,MAGL;AAAA,EACA;AAAA,EACA;AAAA,EAEA,YAAY,cAA0B,YAAyB;AAC7D,SAAK,SAAS;AACd,SAAK,cAAc,eAAe,OAAO,OAAO;AAAA,EAClD;AAAA,EAaA,IAAgC,KAAW,OAAoB;AAC7D,QAAI,UAAU,QAAW;AACvB,aAAO;AAAA,IACT;AAEA,QAAI,KAAK,gBAAgB,QAAQ,UAAU,MAAM;AAC/C,aAAO;AAAA,IACT;AAEA;AAAC,IAAC,KAAK,OAAe,GAAG,IAAI;AAC7B,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,OAAmC,KAAc;AAC/C,WAAO,KAAK,OAAO,GAAG;AACtB,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,IAAgC,KAAiB;AAC/C,WAAO,KAAK,IAAI,GAAG,MAAM;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA,EAKA,IAAgC,KAAuB;AACrD,WAAO,KAAK,OAAO,GAAG;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA,EAKA,WAE+C;AAC7C,WAAO,KAAK;AAAA,EACd;AACF;","names":[]}